openapi: 3.0.1
info:
  title: RooMatch API
  description: API documentation for RooMatch backend
  version: 1.0.0

paths:
  /roommates/register:
    post:
      tags:
        - Roommate
      summary: Register a roommate user
      description: Creates a new roommate user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoommateUser'
      responses:
        '201':
          description: Roommate registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Error creating user
        '500':
          description: Internal server error

  /owners/register:
    post:
      tags:
        - Property Owner
      summary: Register a property owner user
      description: Creates a new property owner user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyOwnerUser'
      responses:
        '201':
          description: Property owner registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Error creating user
        '500':
          description: Internal server error

  /properties/{ownerId}:
    post:
      tags:
        - Properties
      summary: Upload a new property
      description: Adds a new property associated with an owner
      parameters:
        - name: ownerId
          in: path
          required: true
          description: The ID of the property owner
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '201':
          description: Property successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyUploadResponse'
        '400':
          description: Error creating property
        '500':
          description: Internal server error

    get:
      tags:
        - Properties
      summary: Get all properties of a specific owner
      description: Returns all properties associated with a property owner
      parameters:
        - name: ownerId
          in: path
          required: true
          description: The ID of the property owner
          schema:
            type: string
      responses:
        '200':
          description: Properties found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Property'
        '404':
          description: No properties found
        '500':
          description: Internal server error


  /match/{seekerId}:
    get:
      tags:
        - Matching
      summary: Get next match for seeker
      description: Returns a single match for the seeker.
      parameters:
        - name: seekerId
          in: path
          required: true
          description: The ID of the roommate seeker
          schema:
            type: string
      responses:
        '200':
          description: A single match returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        '204':
          description: No more matches
        '400':
          description: Bad request (missing seekerId)

  /roommates/{seekerId}:
    get:
      tags:
        - Roommate
      summary: Get roommate by ID
      description: Returns a roommate user by ID
      parameters:
        - name: seekerId
          in: path
          required: true
          description: The ID of the roommate user
          schema:
            type: string
      responses:
        '200':
          description: Roommate found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoommateUser'
        '404':
          description: Roommate not found
        '500':
          description: Internal server error


  /roommates/generate-bio:
    post:
      tags:
        - Roommate
      summary: Generate a personal bio for a roommate
      description: Uses Gemini AI to generate a short personal bio based on user data.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BioRequest'
      responses:
        '200':
          description: Generated personal bio
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BioResponse'
        '400':
          description: Bad request
        '500':
          description: Internal server error


  /likes:
    post:
      tags:
        - Likes
      summary: Save a liked match
      description: Saves a match that the seeker has liked.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Like'
      responses:
        '201':
          description: Match successfully liked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
        '400':
          description: Error creating liked match
        '500':
          description: Internal server error

  /likes/{seekerId}:
    get:
      tags:
        - Likes
      summary: Get all liked matches by seeker
      description: Retrieves all matches that a specific seeker has liked.
      parameters:
        - name: seekerId
          in: path
          required: true
          description: The ID of the seeker (roommate user)
          schema:
            type: string
      responses:
        '200':
          description: Liked matches found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Like'
        '404':
          description: No liked matches found
        '500':
          description: Internal server error

  /dislikes:
    post:
      tags:
        - Dislikes
      summary: Save a disliked match
      description: Saves a match that the seeker has disliked.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dislike'
      responses:
        '201':
          description: Match successfully marked as disliked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dislike'
        '400':
          description: Error creating disliked match
        '500':
          description: Internal server error

  /dislikes/{seekerId}:
    get:
      tags:
        - Dislikes
      summary: Get all disliked matches by seeker
      description: Retrieves all matches that a specific seeker has disliked.
      parameters:
        - name: seekerId
          in: path
          required: true
          description: The ID of the seeker (roommate user)
          schema:
            type: string
      responses:
        '200':
          description: Disliked matches found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dislike'
        '404':
          description: No disliked matches found
        '500':
          description: Internal server error



components:
  schemas:
    Match:
      type: object
      description: Match object that includes matched roommates and property score
      required:
        - id
        - seekerId
        - propertyId
        - roommateMatches
        - propertyMatchScore
      properties:
        id:
          type: string
          example: "65f9bd..."
        seekerId:
          type: string
          example: "65fa3d.."
        propertyId:
          type: string
          example: "65f9bd.."
        roommateMatches:
          type: array
          items:
            $ref: '#/components/schemas/RoommateMatch'
        propertyMatchScore:
          type: integer
          example: 72

    RoommateMatch:
      type: object
      required:
        - roommateId
        - roommateName
        - matchScore
      properties:
        roommateId:
          type: string
          example: "65fa3d..."
        roommateName:
          type: string
          example: "Ofek Amirav"
        matchScore:
          type: integer
          example: 78

    RegisterResponse:
      type: object
      description: Model representing a response to a user registration request
      required:
        - id
        - token
        - userType
      properties:
        id:
          type: string
          example: "123456789"
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
        userType:
          type: string
          example: "Roommate"

    PropertyUploadResponse:
      type: object
      description: Response after successfully adding a property
      required:
        - propertyId
        - message
      properties:
        propertyId:
          type: string
          example: "65a123bfcdb1ef0010abcd12"
        message:
          type: string
          example: "Property successfully added."


    LookingForRoomiesPreference:
      type: object
      description: "Represents a roommate preference with an optional weight + set weight flag."
      required:
        - attribute
        - weight
        - setWeight
      properties:
        attribute:
          type: string
          enum: [ SMOKER, STUDENT, PET_LOVER, PET_OWNER, VEGETARIAN, CLEAN, NIGHT_WORKER, IN_RELATIONSHIP, KOSHER, JEWISH, MUSLIM, CHRISTIAN, REMOTE_WORKER, ATHEIST, QUIET ]
          example: "QUIET"
        weight:
          type: number
          example: 0.0
        setWeight:
          type: boolean
          example: false

    LookingForCondoPreference:
      type: object
      description: "Represents a roommate condo preference with an optional weight + set weight flag."
      required:
        - preference
        - weight
        - setWeight
      properties:
        preference:
          type: string
          enum: [ BALCONY, ELEVATOR, PET_ALLOWED, SHELTER, FURNISHED, PARKING ]
          example: "BALCONY"
        weight:
          type: number
          example: 0.0
        setWeight:
          type: boolean
          example: false

    RoommateUser:
      type: object
      description: Model representing a roommate user who is looking for an apartment and roommates
      required:
        - fullName
        - phoneNumber
        - gender
        - birthDate
        - work
        - attributes
        - hobbies
        - lookingForRoomies
        - lookingForCondo
        - roommatesNumber
        - minPropertySize
        - maxPropertySize
        - minPrice
        - maxPrice
        - email
        - password
        - profilePicture
        - personalBio
      properties:
        fullName:
          type: string
          example: "Ofek Amirav"
        phoneNumber:
          type: string
          example: "052-1234567"
        gender:
          type: string
          enum: [MALE, FEMALE, OTHER]
          example: "MALE"
        birthDate:
          type: string
          example: "1998-06-15"
        work:
          type: string
          example: "Software Developer"
        attributes:
          type: array
          items:
            type: string
            enum: [SMOKER, STUDENT, PET_LOVER, PET_OWNER, VEGETARIAN, CLEAN, NIGHT_WORKER, IN_RELATIONSHIP, KOSHER, JEWISH, MUSLIM, CHRISTIAN, REMOTE_WORKER, ATHEIST, QUIET]
          example: ["CLEAN", "QUIET", "VEGETARIAN"]
        hobbies:
          type: array
          items:
            type: string
            enum: [MUSICIAN, SPORT, COOKER, PARTY, TV, GAMER, ARTIST, DANCER, WRITER]
          example: ["SPORT", "GAMER"]
        lookingForRoomies:
          type: array
          items:
            $ref: "#/components/schemas/LookingForRoomiesPreference"
          example:
            - attribute: "QUIET"
              weight: 0.75
              setWeight: true
            - attribute: "NIGHT_WORKER"
              weight: 0.5
              setWeight: true
            - attribute: "JEWISH"
              weight: 0.25
              setWeight: true
        lookingForCondo:
          type: array
          items:
            $ref: "#/components/schemas/LookingForCondoPreference"
          example:
            - preference: "ELEVATOR"
              weight: 0.5
              setWeight: true
            - preference: "PARKING"
              weight: 0.5
              setWeight: true
        roommatesNumber:
          type: integer
          example: 2
        minPropertySize:
          type: integer
          example: 65
        maxPropertySize:
          type: integer
          example: 80
        minPrice:
          type: integer
          example: 4500
        maxPrice:
          type: integer
          example: 8000
        email:
          type: string
          example: "ofek@gmail.com"
        password:
          type: string
          example: "123456"
        profilePicture:
          type: string
          nullable: true
          example: "https://example.com/profile.jpg"
        personalBio:
          type: string
          example: "Hi, I'm Ofek, a software developer who loves gaming and sports! I'm looking for a chill roommate who respects shared spaces."

    BioRequest:
      type: object
      required:
        - id
        - fullName
        - hobbies
        - attributes
        - work
      properties:
        id:
          type: string
          example: "6613f1fc4d41b1c1d78f1234"
        fullName:
          type: string
          example: "Zuri Cohen"
        hobbies:
          type: array
          items:
            type: string
            enum: [ MUSICIAN, SPORT, COOKER, PARTY, TV, GAMER, ARTIST, DANCER, WRITER ]
          example: [ "SPORT", "TV" ]
        attributes:
          type: array
          items:
            type: string
            enum: [ SMOKER, STUDENT, PET_LOVER, PET_OWNER, VEGETARIAN, CLEAN, NIGHT_WORKER, IN_RELATIONSHIP, KOSHER, JEWISH, MUSLIM, CHRISTIAN, REMOTE_WORKER, ATHEIST, QUIET ]
          example: [ "CLEAN", "QUIET", "VEGETARIAN" ]
        work:
          type: string
          example: "Software Developer"

    BioResponse:
      type: object
      required:
        - generatedBio
      properties:
        generatedBio:
          type: string
          example: "Hi, I'm Zuri, a software developer who loves a good game and hitting the gym! I'm a clean and quiet vegetarian looking for a chill roommate who respects shared spaces."


    PropertyOwnerUser:
      type: object
      description: Model representing a property owner user who is looking for roommates
      required:
        - fullName
        - phoneNumber
        - birthDate
        - email
        - password
        - profilePicture
      properties:
        fullName:
          type: string
          example: "David Cohen"
        phoneNumber:
          type: string
          example: "054-9876543"
        birthDate:
          type: string
          example: "1998-06-15"
        email:
          type: string
          example: "david@gmail.com"
        password:
          type: string
          example: "abcdef"
        profilePicture:
          type: string
          nullable: true
          example: "https://example.com/owner.jpg"

    Property:
      type: object
      description: Model representing a property
      required:
        - available
        - type
        - address
        - title
        - canContainRoommates
        - roomsNumber
        - bathrooms
        - floor
        - size
        - pricePerMonth
        - features
        - photos
      properties:
        available:
          type: boolean
          example: true
        type:
          type: string
          enum: [ROOM, APARTMENT]
          example: "APARTMENT"
        address:
          type: string
          example: "123 Main St, Tel Aviv"
        title:
          type: string
          example: "Luxury Apartment"
        canContainRoommates:
          type: integer
          example: 3
        roomsNumber:
          type: integer
          example: 4
        bathrooms:
          type: integer
          example: 2
        floor:
          type: integer
          example: 5
        size:
          type: integer
          example: 120
        pricePerMonth:
          type: integer
          example: 7000
        features:
          type: array
          items:
            type: string
            enum: [BALCONY, ELEVATOR, PET_ALLOWED, SHELTER, FURNISHED, PARKING]
          example: ["BALCONY", "ELEVATOR"]
        photos:
          type: array
          items:
            type: string
          example: ["https://example.com/image1.jpg", "https://example.com/image2.jpg"]

    Like:
      type: object
      description: Represents a match that a seeker liked.
      required:
        - id
        - seekerId
        - match
        - likedAt
      properties:
        id:
          type: string
          example: "662fb8dcf4d41b1c1d78f567"
        seekerId:
          type: string
          example: "65fa3dc4f4d41b1c1d78f123"
        match:
          $ref: '#/components/schemas/Match'
        likedAt:
          type: string
          format: date-time
          example: "2025-03-29T12:30:00Z"

    Dislike:
      type: object
      description: Represents a match that a seeker disliked.
      required:
        - id
        - seekerId
        - match
        - dislikedAt
      properties:
        id:
          type: string
          example: "662fb8dcf4d41b1c1d78f890"
        seekerId:
          type: string
          example: "65fa3dc4f4d41b1c1d78f123"
        match:
          $ref: '#/components/schemas/Match'
        dislikedAt:
          type: string
          format: date-time
          example: "2025-03-29T13:45:00Z"




servers:
  - url: http://localhost:8080
    description: Local server