/*
 * RooMatch API
 * API documentation for RooMatch backend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Model representing a property
 */
@ApiModel(description = "Model representing a property")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-13T18:08:01.624619+03:00[Asia/Jerusalem]")
public class Property {
  public static final String SERIALIZED_NAME_AVAILABLE = "available";
  @SerializedName(SERIALIZED_NAME_AVAILABLE)
  private Boolean available;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ROOM("ROOM"),
    
    APARTMENT("APARTMENT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_CAN_CONTAIN_ROOMMATES = "canContainRoommates";
  @SerializedName(SERIALIZED_NAME_CAN_CONTAIN_ROOMMATES)
  private Integer canContainRoommates;

  public static final String SERIALIZED_NAME_ROOMS_NUMBER = "roomsNumber";
  @SerializedName(SERIALIZED_NAME_ROOMS_NUMBER)
  private Integer roomsNumber;

  public static final String SERIALIZED_NAME_BATHROOMS = "bathrooms";
  @SerializedName(SERIALIZED_NAME_BATHROOMS)
  private Integer bathrooms;

  public static final String SERIALIZED_NAME_FLOOR = "floor";
  @SerializedName(SERIALIZED_NAME_FLOOR)
  private Integer floor;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_PRICE_PER_MONTH = "pricePerMonth";
  @SerializedName(SERIALIZED_NAME_PRICE_PER_MONTH)
  private Integer pricePerMonth;

  /**
   * Gets or Sets features
   */
  @JsonAdapter(FeaturesEnum.Adapter.class)
  public enum FeaturesEnum {
    BALCONY("BALCONY"),
    
    ELEVATOR("ELEVATOR"),
    
    PET_ALLOWED("PET_ALLOWED"),
    
    SHELTER("SHELTER"),
    
    FURNISHED("FURNISHED"),
    
    PARKING("PARKING");

    private String value;

    FeaturesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeaturesEnum fromValue(String value) {
      for (FeaturesEnum b : FeaturesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeaturesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeaturesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeaturesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeaturesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private List<FeaturesEnum> features = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHOTOS = "photos";
  @SerializedName(SERIALIZED_NAME_PHOTOS)
  private List<String> photos = new ArrayList<>();

  public Property() {
  }

  public Property available(Boolean available) {
    
    this.available = available;
    return this;
  }

   /**
   * Get available
   * @return available
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "")

  public Boolean getAvailable() {
    return available;
  }


  public void setAvailable(Boolean available) {
    this.available = available;
  }


  public Property type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "APARTMENT", required = true, value = "")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Property address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "123 Main St, Tel Aviv", required = true, value = "")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public Property title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Luxury Apartment", required = true, value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public Property canContainRoommates(Integer canContainRoommates) {
    
    this.canContainRoommates = canContainRoommates;
    return this;
  }

   /**
   * Get canContainRoommates
   * @return canContainRoommates
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "3", required = true, value = "")

  public Integer getCanContainRoommates() {
    return canContainRoommates;
  }


  public void setCanContainRoommates(Integer canContainRoommates) {
    this.canContainRoommates = canContainRoommates;
  }


  public Property roomsNumber(Integer roomsNumber) {
    
    this.roomsNumber = roomsNumber;
    return this;
  }

   /**
   * Get roomsNumber
   * @return roomsNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "4", required = true, value = "")

  public Integer getRoomsNumber() {
    return roomsNumber;
  }


  public void setRoomsNumber(Integer roomsNumber) {
    this.roomsNumber = roomsNumber;
  }


  public Property bathrooms(Integer bathrooms) {
    
    this.bathrooms = bathrooms;
    return this;
  }

   /**
   * Get bathrooms
   * @return bathrooms
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2", required = true, value = "")

  public Integer getBathrooms() {
    return bathrooms;
  }


  public void setBathrooms(Integer bathrooms) {
    this.bathrooms = bathrooms;
  }


  public Property floor(Integer floor) {
    
    this.floor = floor;
    return this;
  }

   /**
   * Get floor
   * @return floor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5", required = true, value = "")

  public Integer getFloor() {
    return floor;
  }


  public void setFloor(Integer floor) {
    this.floor = floor;
  }


  public Property size(Integer size) {
    
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "120", required = true, value = "")

  public Integer getSize() {
    return size;
  }


  public void setSize(Integer size) {
    this.size = size;
  }


  public Property pricePerMonth(Integer pricePerMonth) {
    
    this.pricePerMonth = pricePerMonth;
    return this;
  }

   /**
   * Get pricePerMonth
   * @return pricePerMonth
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "7000", required = true, value = "")

  public Integer getPricePerMonth() {
    return pricePerMonth;
  }


  public void setPricePerMonth(Integer pricePerMonth) {
    this.pricePerMonth = pricePerMonth;
  }


  public Property features(List<FeaturesEnum> features) {
    
    this.features = features;
    return this;
  }

  public Property addFeaturesItem(FeaturesEnum featuresItem) {
    this.features.add(featuresItem);
    return this;
  }

   /**
   * Get features
   * @return features
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[\"BALCONY\",\"ELEVATOR\"]", required = true, value = "")

  public List<FeaturesEnum> getFeatures() {
    return features;
  }


  public void setFeatures(List<FeaturesEnum> features) {
    this.features = features;
  }


  public Property photos(List<String> photos) {
    
    this.photos = photos;
    return this;
  }

  public Property addPhotosItem(String photosItem) {
    this.photos.add(photosItem);
    return this;
  }

   /**
   * Get photos
   * @return photos
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[\"https://example.com/image1.jpg\",\"https://example.com/image2.jpg\"]", required = true, value = "")

  public List<String> getPhotos() {
    return photos;
  }


  public void setPhotos(List<String> photos) {
    this.photos = photos;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Property property = (Property) o;
    return Objects.equals(this.available, property.available) &&
        Objects.equals(this.type, property.type) &&
        Objects.equals(this.address, property.address) &&
        Objects.equals(this.title, property.title) &&
        Objects.equals(this.canContainRoommates, property.canContainRoommates) &&
        Objects.equals(this.roomsNumber, property.roomsNumber) &&
        Objects.equals(this.bathrooms, property.bathrooms) &&
        Objects.equals(this.floor, property.floor) &&
        Objects.equals(this.size, property.size) &&
        Objects.equals(this.pricePerMonth, property.pricePerMonth) &&
        Objects.equals(this.features, property.features) &&
        Objects.equals(this.photos, property.photos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(available, type, address, title, canContainRoommates, roomsNumber, bathrooms, floor, size, pricePerMonth, features, photos);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Property {\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    canContainRoommates: ").append(toIndentedString(canContainRoommates)).append("\n");
    sb.append("    roomsNumber: ").append(toIndentedString(roomsNumber)).append("\n");
    sb.append("    bathrooms: ").append(toIndentedString(bathrooms)).append("\n");
    sb.append("    floor: ").append(toIndentedString(floor)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    pricePerMonth: ").append(toIndentedString(pricePerMonth)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    photos: ").append(toIndentedString(photos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("available");
    openapiFields.add("type");
    openapiFields.add("address");
    openapiFields.add("title");
    openapiFields.add("canContainRoommates");
    openapiFields.add("roomsNumber");
    openapiFields.add("bathrooms");
    openapiFields.add("floor");
    openapiFields.add("size");
    openapiFields.add("pricePerMonth");
    openapiFields.add("features");
    openapiFields.add("photos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("available");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("canContainRoommates");
    openapiRequiredFields.add("roomsNumber");
    openapiRequiredFields.add("bathrooms");
    openapiRequiredFields.add("floor");
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("pricePerMonth");
    openapiRequiredFields.add("features");
    openapiRequiredFields.add("photos");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Property
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Property.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Property is not found in the empty JSON string", Property.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Property.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Property` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Property.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) && !jsonObj.get("features").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `features` to be an array in the JSON string but got `%s`", jsonObj.get("features").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("photos") != null && !jsonObj.get("photos").isJsonNull()) && !jsonObj.get("photos").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `photos` to be an array in the JSON string but got `%s`", jsonObj.get("photos").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Property.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Property' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Property> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Property.class));

       return (TypeAdapter<T>) new TypeAdapter<Property>() {
           @Override
           public void write(JsonWriter out, Property value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Property read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Property given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Property
  * @throws IOException if the JSON string is invalid with respect to Property
  */
  public static Property fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Property.class);
  }

 /**
  * Convert an instance of Property to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

