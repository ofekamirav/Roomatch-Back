/*
 * RooMatch API
 * API documentation for RooMatch backend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BioRequest;
import org.openapitools.client.model.BioResponse;
import org.openapitools.client.model.RegisterResponse;
import org.openapitools.client.model.RoommateUser;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RoommateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RoommateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RoommateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for roommatesGenerateBioPost
     * @param bioRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated personal bio </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roommatesGenerateBioPostCall(BioRequest bioRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bioRequest;

        // create path and map variables
        String localVarPath = "/roommates/generate-bio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roommatesGenerateBioPostValidateBeforeCall(BioRequest bioRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bioRequest' is set
        if (bioRequest == null) {
            throw new ApiException("Missing the required parameter 'bioRequest' when calling roommatesGenerateBioPost(Async)");
        }
        

        okhttp3.Call localVarCall = roommatesGenerateBioPostCall(bioRequest, _callback);
        return localVarCall;

    }

    /**
     * Generate a personal bio for a roommate
     * Uses Gemini AI to generate a short personal bio based on user data.
     * @param bioRequest  (required)
     * @return BioResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated personal bio </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public BioResponse roommatesGenerateBioPost(BioRequest bioRequest) throws ApiException {
        ApiResponse<BioResponse> localVarResp = roommatesGenerateBioPostWithHttpInfo(bioRequest);
        return localVarResp.getData();
    }

    /**
     * Generate a personal bio for a roommate
     * Uses Gemini AI to generate a short personal bio based on user data.
     * @param bioRequest  (required)
     * @return ApiResponse&lt;BioResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated personal bio </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BioResponse> roommatesGenerateBioPostWithHttpInfo(BioRequest bioRequest) throws ApiException {
        okhttp3.Call localVarCall = roommatesGenerateBioPostValidateBeforeCall(bioRequest, null);
        Type localVarReturnType = new TypeToken<BioResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a personal bio for a roommate (asynchronously)
     * Uses Gemini AI to generate a short personal bio based on user data.
     * @param bioRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated personal bio </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roommatesGenerateBioPostAsync(BioRequest bioRequest, final ApiCallback<BioResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = roommatesGenerateBioPostValidateBeforeCall(bioRequest, _callback);
        Type localVarReturnType = new TypeToken<BioResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roommatesRegisterPost
     * @param roommateUser  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Roommate registration successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error creating user </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roommatesRegisterPostCall(RoommateUser roommateUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roommateUser;

        // create path and map variables
        String localVarPath = "/roommates/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roommatesRegisterPostValidateBeforeCall(RoommateUser roommateUser, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roommateUser' is set
        if (roommateUser == null) {
            throw new ApiException("Missing the required parameter 'roommateUser' when calling roommatesRegisterPost(Async)");
        }
        

        okhttp3.Call localVarCall = roommatesRegisterPostCall(roommateUser, _callback);
        return localVarCall;

    }

    /**
     * Register a roommate user
     * Creates a new roommate user account
     * @param roommateUser  (required)
     * @return RegisterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Roommate registration successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error creating user </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RegisterResponse roommatesRegisterPost(RoommateUser roommateUser) throws ApiException {
        ApiResponse<RegisterResponse> localVarResp = roommatesRegisterPostWithHttpInfo(roommateUser);
        return localVarResp.getData();
    }

    /**
     * Register a roommate user
     * Creates a new roommate user account
     * @param roommateUser  (required)
     * @return ApiResponse&lt;RegisterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Roommate registration successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error creating user </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisterResponse> roommatesRegisterPostWithHttpInfo(RoommateUser roommateUser) throws ApiException {
        okhttp3.Call localVarCall = roommatesRegisterPostValidateBeforeCall(roommateUser, null);
        Type localVarReturnType = new TypeToken<RegisterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register a roommate user (asynchronously)
     * Creates a new roommate user account
     * @param roommateUser  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Roommate registration successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error creating user </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roommatesRegisterPostAsync(RoommateUser roommateUser, final ApiCallback<RegisterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = roommatesRegisterPostValidateBeforeCall(roommateUser, _callback);
        Type localVarReturnType = new TypeToken<RegisterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roommatesSeekerIdGet
     * @param seekerId The ID of the roommate user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roommate found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Roommate not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roommatesSeekerIdGetCall(String seekerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/roommates/{seekerId}"
            .replaceAll("\\{" + "seekerId" + "\\}", localVarApiClient.escapeString(seekerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roommatesSeekerIdGetValidateBeforeCall(String seekerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'seekerId' is set
        if (seekerId == null) {
            throw new ApiException("Missing the required parameter 'seekerId' when calling roommatesSeekerIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = roommatesSeekerIdGetCall(seekerId, _callback);
        return localVarCall;

    }

    /**
     * Get roommate by ID
     * Returns a roommate user by ID
     * @param seekerId The ID of the roommate user (required)
     * @return RoommateUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roommate found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Roommate not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RoommateUser roommatesSeekerIdGet(String seekerId) throws ApiException {
        ApiResponse<RoommateUser> localVarResp = roommatesSeekerIdGetWithHttpInfo(seekerId);
        return localVarResp.getData();
    }

    /**
     * Get roommate by ID
     * Returns a roommate user by ID
     * @param seekerId The ID of the roommate user (required)
     * @return ApiResponse&lt;RoommateUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roommate found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Roommate not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoommateUser> roommatesSeekerIdGetWithHttpInfo(String seekerId) throws ApiException {
        okhttp3.Call localVarCall = roommatesSeekerIdGetValidateBeforeCall(seekerId, null);
        Type localVarReturnType = new TypeToken<RoommateUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get roommate by ID (asynchronously)
     * Returns a roommate user by ID
     * @param seekerId The ID of the roommate user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roommate found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Roommate not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roommatesSeekerIdGetAsync(String seekerId, final ApiCallback<RoommateUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = roommatesSeekerIdGetValidateBeforeCall(seekerId, _callback);
        Type localVarReturnType = new TypeToken<RoommateUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
