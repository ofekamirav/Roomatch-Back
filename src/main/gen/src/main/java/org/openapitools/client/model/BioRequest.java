/*
 * RooMatch API
 * API documentation for RooMatch backend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BioRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-13T18:08:01.624619+03:00[Asia/Jerusalem]")
public class BioRequest {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  /**
   * Gets or Sets hobbies
   */
  @JsonAdapter(HobbiesEnum.Adapter.class)
  public enum HobbiesEnum {
    MUSICIAN("MUSICIAN"),
    
    SPORT("SPORT"),
    
    COOKER("COOKER"),
    
    PARTY("PARTY"),
    
    TV("TV"),
    
    GAMER("GAMER"),
    
    ARTIST("ARTIST"),
    
    DANCER("DANCER"),
    
    WRITER("WRITER");

    private String value;

    HobbiesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HobbiesEnum fromValue(String value) {
      for (HobbiesEnum b : HobbiesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HobbiesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HobbiesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HobbiesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HobbiesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_HOBBIES = "hobbies";
  @SerializedName(SERIALIZED_NAME_HOBBIES)
  private List<HobbiesEnum> hobbies = new ArrayList<>();

  /**
   * Gets or Sets attributes
   */
  @JsonAdapter(AttributesEnum.Adapter.class)
  public enum AttributesEnum {
    SMOKER("SMOKER"),
    
    STUDENT("STUDENT"),
    
    PET_LOVER("PET_LOVER"),
    
    PET_OWNER("PET_OWNER"),
    
    VEGETARIAN("VEGETARIAN"),
    
    CLEAN("CLEAN"),
    
    NIGHT_WORKER("NIGHT_WORKER"),
    
    IN_RELATIONSHIP("IN_RELATIONSHIP"),
    
    KOSHER("KOSHER"),
    
    JEWISH("JEWISH"),
    
    MUSLIM("MUSLIM"),
    
    CHRISTIAN("CHRISTIAN"),
    
    REMOTE_WORKER("REMOTE_WORKER"),
    
    ATHEIST("ATHEIST"),
    
    QUIET("QUIET");

    private String value;

    AttributesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AttributesEnum fromValue(String value) {
      for (AttributesEnum b : AttributesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AttributesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AttributesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AttributesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AttributesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<AttributesEnum> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORK = "work";
  @SerializedName(SERIALIZED_NAME_WORK)
  private String work;

  public BioRequest() {
  }

  public BioRequest id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "6613f1fc4d41b1c1d78f1234", required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public BioRequest fullName(String fullName) {
    
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Zuri Cohen", required = true, value = "")

  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public BioRequest hobbies(List<HobbiesEnum> hobbies) {
    
    this.hobbies = hobbies;
    return this;
  }

  public BioRequest addHobbiesItem(HobbiesEnum hobbiesItem) {
    this.hobbies.add(hobbiesItem);
    return this;
  }

   /**
   * Get hobbies
   * @return hobbies
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[\"SPORT\",\"TV\"]", required = true, value = "")

  public List<HobbiesEnum> getHobbies() {
    return hobbies;
  }


  public void setHobbies(List<HobbiesEnum> hobbies) {
    this.hobbies = hobbies;
  }


  public BioRequest attributes(List<AttributesEnum> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public BioRequest addAttributesItem(AttributesEnum attributesItem) {
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[\"CLEAN\",\"QUIET\",\"VEGETARIAN\"]", required = true, value = "")

  public List<AttributesEnum> getAttributes() {
    return attributes;
  }


  public void setAttributes(List<AttributesEnum> attributes) {
    this.attributes = attributes;
  }


  public BioRequest work(String work) {
    
    this.work = work;
    return this;
  }

   /**
   * Get work
   * @return work
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Software Developer", required = true, value = "")

  public String getWork() {
    return work;
  }


  public void setWork(String work) {
    this.work = work;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BioRequest bioRequest = (BioRequest) o;
    return Objects.equals(this.id, bioRequest.id) &&
        Objects.equals(this.fullName, bioRequest.fullName) &&
        Objects.equals(this.hobbies, bioRequest.hobbies) &&
        Objects.equals(this.attributes, bioRequest.attributes) &&
        Objects.equals(this.work, bioRequest.work);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, fullName, hobbies, attributes, work);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BioRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    hobbies: ").append(toIndentedString(hobbies)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    work: ").append(toIndentedString(work)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("fullName");
    openapiFields.add("hobbies");
    openapiFields.add("attributes");
    openapiFields.add("work");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("fullName");
    openapiRequiredFields.add("hobbies");
    openapiRequiredFields.add("attributes");
    openapiRequiredFields.add("work");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BioRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (BioRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in BioRequest is not found in the empty JSON string", BioRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BioRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BioRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BioRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("hobbies") != null && !jsonObj.get("hobbies").isJsonNull()) && !jsonObj.get("hobbies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hobbies` to be an array in the JSON string but got `%s`", jsonObj.get("hobbies").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) && !jsonObj.get("attributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
      }
      if ((jsonObj.get("work") != null && !jsonObj.get("work").isJsonNull()) && !jsonObj.get("work").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `work` to be a primitive type in the JSON string but got `%s`", jsonObj.get("work").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BioRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BioRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BioRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BioRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BioRequest>() {
           @Override
           public void write(JsonWriter out, BioRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BioRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BioRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BioRequest
  * @throws IOException if the JSON string is invalid with respect to BioRequest
  */
  public static BioRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BioRequest.class);
  }

 /**
  * Convert an instance of BioRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

