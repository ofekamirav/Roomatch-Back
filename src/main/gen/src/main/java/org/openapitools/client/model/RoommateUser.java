/*
 * RooMatch API
 * API documentation for RooMatch backend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.LookingForCondoPreference;
import org.openapitools.client.model.LookingForRoomiesPreference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Model representing a roommate user who is looking for an apartment and roommates
 */
@ApiModel(description = "Model representing a roommate user who is looking for an apartment and roommates")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-13T18:08:01.624619+03:00[Asia/Jerusalem]")
public class RoommateUser {
  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  /**
   * Gets or Sets gender
   */
  @JsonAdapter(GenderEnum.Adapter.class)
  public enum GenderEnum {
    MALE("MALE"),
    
    FEMALE("FEMALE"),
    
    OTHER("OTHER");

    private String value;

    GenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenderEnum fromValue(String value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GenderEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private GenderEnum gender;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private String birthDate;

  public static final String SERIALIZED_NAME_WORK = "work";
  @SerializedName(SERIALIZED_NAME_WORK)
  private String work;

  /**
   * Gets or Sets attributes
   */
  @JsonAdapter(AttributesEnum.Adapter.class)
  public enum AttributesEnum {
    SMOKER("SMOKER"),
    
    STUDENT("STUDENT"),
    
    PET_LOVER("PET_LOVER"),
    
    PET_OWNER("PET_OWNER"),
    
    VEGETARIAN("VEGETARIAN"),
    
    CLEAN("CLEAN"),
    
    NIGHT_WORKER("NIGHT_WORKER"),
    
    IN_RELATIONSHIP("IN_RELATIONSHIP"),
    
    KOSHER("KOSHER"),
    
    JEWISH("JEWISH"),
    
    MUSLIM("MUSLIM"),
    
    CHRISTIAN("CHRISTIAN"),
    
    REMOTE_WORKER("REMOTE_WORKER"),
    
    ATHEIST("ATHEIST"),
    
    QUIET("QUIET");

    private String value;

    AttributesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AttributesEnum fromValue(String value) {
      for (AttributesEnum b : AttributesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AttributesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AttributesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AttributesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AttributesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<AttributesEnum> attributes = new ArrayList<>();

  /**
   * Gets or Sets hobbies
   */
  @JsonAdapter(HobbiesEnum.Adapter.class)
  public enum HobbiesEnum {
    MUSICIAN("MUSICIAN"),
    
    SPORT("SPORT"),
    
    COOKER("COOKER"),
    
    PARTY("PARTY"),
    
    TV("TV"),
    
    GAMER("GAMER"),
    
    ARTIST("ARTIST"),
    
    DANCER("DANCER"),
    
    WRITER("WRITER");

    private String value;

    HobbiesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HobbiesEnum fromValue(String value) {
      for (HobbiesEnum b : HobbiesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HobbiesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HobbiesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HobbiesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HobbiesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_HOBBIES = "hobbies";
  @SerializedName(SERIALIZED_NAME_HOBBIES)
  private List<HobbiesEnum> hobbies = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOOKING_FOR_ROOMIES = "lookingForRoomies";
  @SerializedName(SERIALIZED_NAME_LOOKING_FOR_ROOMIES)
  private List<LookingForRoomiesPreference> lookingForRoomies = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOOKING_FOR_CONDO = "lookingForCondo";
  @SerializedName(SERIALIZED_NAME_LOOKING_FOR_CONDO)
  private List<LookingForCondoPreference> lookingForCondo = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROOMMATES_NUMBER = "roommatesNumber";
  @SerializedName(SERIALIZED_NAME_ROOMMATES_NUMBER)
  private Integer roommatesNumber;

  public static final String SERIALIZED_NAME_MIN_PROPERTY_SIZE = "minPropertySize";
  @SerializedName(SERIALIZED_NAME_MIN_PROPERTY_SIZE)
  private Integer minPropertySize;

  public static final String SERIALIZED_NAME_MAX_PROPERTY_SIZE = "maxPropertySize";
  @SerializedName(SERIALIZED_NAME_MAX_PROPERTY_SIZE)
  private Integer maxPropertySize;

  public static final String SERIALIZED_NAME_MIN_PRICE = "minPrice";
  @SerializedName(SERIALIZED_NAME_MIN_PRICE)
  private Integer minPrice;

  public static final String SERIALIZED_NAME_MAX_PRICE = "maxPrice";
  @SerializedName(SERIALIZED_NAME_MAX_PRICE)
  private Integer maxPrice;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PROFILE_PICTURE = "profilePicture";
  @SerializedName(SERIALIZED_NAME_PROFILE_PICTURE)
  private String profilePicture;

  public static final String SERIALIZED_NAME_PERSONAL_BIO = "personalBio";
  @SerializedName(SERIALIZED_NAME_PERSONAL_BIO)
  private String personalBio;

  public RoommateUser() {
  }

  public RoommateUser fullName(String fullName) {
    
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Ofek Amirav", required = true, value = "")

  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public RoommateUser phoneNumber(String phoneNumber) {
    
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * Get phoneNumber
   * @return phoneNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "052-1234567", required = true, value = "")

  public String getPhoneNumber() {
    return phoneNumber;
  }


  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public RoommateUser gender(GenderEnum gender) {
    
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "MALE", required = true, value = "")

  public GenderEnum getGender() {
    return gender;
  }


  public void setGender(GenderEnum gender) {
    this.gender = gender;
  }


  public RoommateUser birthDate(String birthDate) {
    
    this.birthDate = birthDate;
    return this;
  }

   /**
   * Get birthDate
   * @return birthDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1998-06-15", required = true, value = "")

  public String getBirthDate() {
    return birthDate;
  }


  public void setBirthDate(String birthDate) {
    this.birthDate = birthDate;
  }


  public RoommateUser work(String work) {
    
    this.work = work;
    return this;
  }

   /**
   * Get work
   * @return work
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Software Developer", required = true, value = "")

  public String getWork() {
    return work;
  }


  public void setWork(String work) {
    this.work = work;
  }


  public RoommateUser attributes(List<AttributesEnum> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public RoommateUser addAttributesItem(AttributesEnum attributesItem) {
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[\"CLEAN\",\"QUIET\",\"VEGETARIAN\"]", required = true, value = "")

  public List<AttributesEnum> getAttributes() {
    return attributes;
  }


  public void setAttributes(List<AttributesEnum> attributes) {
    this.attributes = attributes;
  }


  public RoommateUser hobbies(List<HobbiesEnum> hobbies) {
    
    this.hobbies = hobbies;
    return this;
  }

  public RoommateUser addHobbiesItem(HobbiesEnum hobbiesItem) {
    this.hobbies.add(hobbiesItem);
    return this;
  }

   /**
   * Get hobbies
   * @return hobbies
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[\"SPORT\",\"GAMER\"]", required = true, value = "")

  public List<HobbiesEnum> getHobbies() {
    return hobbies;
  }


  public void setHobbies(List<HobbiesEnum> hobbies) {
    this.hobbies = hobbies;
  }


  public RoommateUser lookingForRoomies(List<LookingForRoomiesPreference> lookingForRoomies) {
    
    this.lookingForRoomies = lookingForRoomies;
    return this;
  }

  public RoommateUser addLookingForRoomiesItem(LookingForRoomiesPreference lookingForRoomiesItem) {
    this.lookingForRoomies.add(lookingForRoomiesItem);
    return this;
  }

   /**
   * Get lookingForRoomies
   * @return lookingForRoomies
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[{\"attribute\":\"QUIET\",\"weight\":0.75,\"setWeight\":true},{\"attribute\":\"NIGHT_WORKER\",\"weight\":0.5,\"setWeight\":true},{\"attribute\":\"JEWISH\",\"weight\":0.25,\"setWeight\":true}]", required = true, value = "")

  public List<LookingForRoomiesPreference> getLookingForRoomies() {
    return lookingForRoomies;
  }


  public void setLookingForRoomies(List<LookingForRoomiesPreference> lookingForRoomies) {
    this.lookingForRoomies = lookingForRoomies;
  }


  public RoommateUser lookingForCondo(List<LookingForCondoPreference> lookingForCondo) {
    
    this.lookingForCondo = lookingForCondo;
    return this;
  }

  public RoommateUser addLookingForCondoItem(LookingForCondoPreference lookingForCondoItem) {
    this.lookingForCondo.add(lookingForCondoItem);
    return this;
  }

   /**
   * Get lookingForCondo
   * @return lookingForCondo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[{\"preference\":\"ELEVATOR\",\"weight\":0.5,\"setWeight\":true},{\"preference\":\"PARKING\",\"weight\":0.5,\"setWeight\":true}]", required = true, value = "")

  public List<LookingForCondoPreference> getLookingForCondo() {
    return lookingForCondo;
  }


  public void setLookingForCondo(List<LookingForCondoPreference> lookingForCondo) {
    this.lookingForCondo = lookingForCondo;
  }


  public RoommateUser roommatesNumber(Integer roommatesNumber) {
    
    this.roommatesNumber = roommatesNumber;
    return this;
  }

   /**
   * Get roommatesNumber
   * @return roommatesNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2", required = true, value = "")

  public Integer getRoommatesNumber() {
    return roommatesNumber;
  }


  public void setRoommatesNumber(Integer roommatesNumber) {
    this.roommatesNumber = roommatesNumber;
  }


  public RoommateUser minPropertySize(Integer minPropertySize) {
    
    this.minPropertySize = minPropertySize;
    return this;
  }

   /**
   * Get minPropertySize
   * @return minPropertySize
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "65", required = true, value = "")

  public Integer getMinPropertySize() {
    return minPropertySize;
  }


  public void setMinPropertySize(Integer minPropertySize) {
    this.minPropertySize = minPropertySize;
  }


  public RoommateUser maxPropertySize(Integer maxPropertySize) {
    
    this.maxPropertySize = maxPropertySize;
    return this;
  }

   /**
   * Get maxPropertySize
   * @return maxPropertySize
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "80", required = true, value = "")

  public Integer getMaxPropertySize() {
    return maxPropertySize;
  }


  public void setMaxPropertySize(Integer maxPropertySize) {
    this.maxPropertySize = maxPropertySize;
  }


  public RoommateUser minPrice(Integer minPrice) {
    
    this.minPrice = minPrice;
    return this;
  }

   /**
   * Get minPrice
   * @return minPrice
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "4500", required = true, value = "")

  public Integer getMinPrice() {
    return minPrice;
  }


  public void setMinPrice(Integer minPrice) {
    this.minPrice = minPrice;
  }


  public RoommateUser maxPrice(Integer maxPrice) {
    
    this.maxPrice = maxPrice;
    return this;
  }

   /**
   * Get maxPrice
   * @return maxPrice
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "8000", required = true, value = "")

  public Integer getMaxPrice() {
    return maxPrice;
  }


  public void setMaxPrice(Integer maxPrice) {
    this.maxPrice = maxPrice;
  }


  public RoommateUser email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ofek@gmail.com", required = true, value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public RoommateUser password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "123456", required = true, value = "")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public RoommateUser profilePicture(String profilePicture) {
    
    this.profilePicture = profilePicture;
    return this;
  }

   /**
   * Get profilePicture
   * @return profilePicture
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://example.com/profile.jpg", required = true, value = "")

  public String getProfilePicture() {
    return profilePicture;
  }


  public void setProfilePicture(String profilePicture) {
    this.profilePicture = profilePicture;
  }


  public RoommateUser personalBio(String personalBio) {
    
    this.personalBio = personalBio;
    return this;
  }

   /**
   * Get personalBio
   * @return personalBio
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Hi, I'm Ofek, a software developer who loves gaming and sports! I'm looking for a chill roommate who respects shared spaces.", required = true, value = "")

  public String getPersonalBio() {
    return personalBio;
  }


  public void setPersonalBio(String personalBio) {
    this.personalBio = personalBio;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoommateUser roommateUser = (RoommateUser) o;
    return Objects.equals(this.fullName, roommateUser.fullName) &&
        Objects.equals(this.phoneNumber, roommateUser.phoneNumber) &&
        Objects.equals(this.gender, roommateUser.gender) &&
        Objects.equals(this.birthDate, roommateUser.birthDate) &&
        Objects.equals(this.work, roommateUser.work) &&
        Objects.equals(this.attributes, roommateUser.attributes) &&
        Objects.equals(this.hobbies, roommateUser.hobbies) &&
        Objects.equals(this.lookingForRoomies, roommateUser.lookingForRoomies) &&
        Objects.equals(this.lookingForCondo, roommateUser.lookingForCondo) &&
        Objects.equals(this.roommatesNumber, roommateUser.roommatesNumber) &&
        Objects.equals(this.minPropertySize, roommateUser.minPropertySize) &&
        Objects.equals(this.maxPropertySize, roommateUser.maxPropertySize) &&
        Objects.equals(this.minPrice, roommateUser.minPrice) &&
        Objects.equals(this.maxPrice, roommateUser.maxPrice) &&
        Objects.equals(this.email, roommateUser.email) &&
        Objects.equals(this.password, roommateUser.password) &&
        Objects.equals(this.profilePicture, roommateUser.profilePicture) &&
        Objects.equals(this.personalBio, roommateUser.personalBio);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fullName, phoneNumber, gender, birthDate, work, attributes, hobbies, lookingForRoomies, lookingForCondo, roommatesNumber, minPropertySize, maxPropertySize, minPrice, maxPrice, email, password, profilePicture, personalBio);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoommateUser {\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    work: ").append(toIndentedString(work)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    hobbies: ").append(toIndentedString(hobbies)).append("\n");
    sb.append("    lookingForRoomies: ").append(toIndentedString(lookingForRoomies)).append("\n");
    sb.append("    lookingForCondo: ").append(toIndentedString(lookingForCondo)).append("\n");
    sb.append("    roommatesNumber: ").append(toIndentedString(roommatesNumber)).append("\n");
    sb.append("    minPropertySize: ").append(toIndentedString(minPropertySize)).append("\n");
    sb.append("    maxPropertySize: ").append(toIndentedString(maxPropertySize)).append("\n");
    sb.append("    minPrice: ").append(toIndentedString(minPrice)).append("\n");
    sb.append("    maxPrice: ").append(toIndentedString(maxPrice)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    profilePicture: ").append(toIndentedString(profilePicture)).append("\n");
    sb.append("    personalBio: ").append(toIndentedString(personalBio)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fullName");
    openapiFields.add("phoneNumber");
    openapiFields.add("gender");
    openapiFields.add("birthDate");
    openapiFields.add("work");
    openapiFields.add("attributes");
    openapiFields.add("hobbies");
    openapiFields.add("lookingForRoomies");
    openapiFields.add("lookingForCondo");
    openapiFields.add("roommatesNumber");
    openapiFields.add("minPropertySize");
    openapiFields.add("maxPropertySize");
    openapiFields.add("minPrice");
    openapiFields.add("maxPrice");
    openapiFields.add("email");
    openapiFields.add("password");
    openapiFields.add("profilePicture");
    openapiFields.add("personalBio");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fullName");
    openapiRequiredFields.add("phoneNumber");
    openapiRequiredFields.add("gender");
    openapiRequiredFields.add("birthDate");
    openapiRequiredFields.add("work");
    openapiRequiredFields.add("attributes");
    openapiRequiredFields.add("hobbies");
    openapiRequiredFields.add("lookingForRoomies");
    openapiRequiredFields.add("lookingForCondo");
    openapiRequiredFields.add("roommatesNumber");
    openapiRequiredFields.add("minPropertySize");
    openapiRequiredFields.add("maxPropertySize");
    openapiRequiredFields.add("minPrice");
    openapiRequiredFields.add("maxPrice");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("password");
    openapiRequiredFields.add("profilePicture");
    openapiRequiredFields.add("personalBio");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RoommateUser
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (RoommateUser.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoommateUser is not found in the empty JSON string", RoommateUser.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RoommateUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoommateUser` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RoommateUser.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("birthDate") != null && !jsonObj.get("birthDate").isJsonNull()) && !jsonObj.get("birthDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthDate").toString()));
      }
      if ((jsonObj.get("work") != null && !jsonObj.get("work").isJsonNull()) && !jsonObj.get("work").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `work` to be a primitive type in the JSON string but got `%s`", jsonObj.get("work").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) && !jsonObj.get("attributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("hobbies") != null && !jsonObj.get("hobbies").isJsonNull()) && !jsonObj.get("hobbies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hobbies` to be an array in the JSON string but got `%s`", jsonObj.get("hobbies").toString()));
      }
      if (jsonObj.get("lookingForRoomies") != null && !jsonObj.get("lookingForRoomies").isJsonNull()) {
        JsonArray jsonArraylookingForRoomies = jsonObj.getAsJsonArray("lookingForRoomies");
        if (jsonArraylookingForRoomies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lookingForRoomies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lookingForRoomies` to be an array in the JSON string but got `%s`", jsonObj.get("lookingForRoomies").toString()));
          }

          // validate the optional field `lookingForRoomies` (array)
          for (int i = 0; i < jsonArraylookingForRoomies.size(); i++) {
            LookingForRoomiesPreference.validateJsonObject(jsonArraylookingForRoomies.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("lookingForCondo") != null && !jsonObj.get("lookingForCondo").isJsonNull()) {
        JsonArray jsonArraylookingForCondo = jsonObj.getAsJsonArray("lookingForCondo");
        if (jsonArraylookingForCondo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lookingForCondo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lookingForCondo` to be an array in the JSON string but got `%s`", jsonObj.get("lookingForCondo").toString()));
          }

          // validate the optional field `lookingForCondo` (array)
          for (int i = 0; i < jsonArraylookingForCondo.size(); i++) {
            LookingForCondoPreference.validateJsonObject(jsonArraylookingForCondo.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("profilePicture") != null && !jsonObj.get("profilePicture").isJsonNull()) && !jsonObj.get("profilePicture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profilePicture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profilePicture").toString()));
      }
      if ((jsonObj.get("personalBio") != null && !jsonObj.get("personalBio").isJsonNull()) && !jsonObj.get("personalBio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personalBio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personalBio").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoommateUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoommateUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoommateUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoommateUser.class));

       return (TypeAdapter<T>) new TypeAdapter<RoommateUser>() {
           @Override
           public void write(JsonWriter out, RoommateUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoommateUser read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RoommateUser given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RoommateUser
  * @throws IOException if the JSON string is invalid with respect to RoommateUser
  */
  public static RoommateUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoommateUser.class);
  }

 /**
  * Convert an instance of RoommateUser to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

