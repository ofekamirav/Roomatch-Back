/*
 * RooMatch API
 * API documentation for RooMatch backend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a roommate preference with an optional weight + set weight flag.
 */
@ApiModel(description = "Represents a roommate preference with an optional weight + set weight flag.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-13T18:08:01.624619+03:00[Asia/Jerusalem]")
public class LookingForRoomiesPreference {
  /**
   * Gets or Sets attribute
   */
  @JsonAdapter(AttributeEnum.Adapter.class)
  public enum AttributeEnum {
    SMOKER("SMOKER"),
    
    STUDENT("STUDENT"),
    
    PET_LOVER("PET_LOVER"),
    
    PET_OWNER("PET_OWNER"),
    
    VEGETARIAN("VEGETARIAN"),
    
    CLEAN("CLEAN"),
    
    NIGHT_WORKER("NIGHT_WORKER"),
    
    IN_RELATIONSHIP("IN_RELATIONSHIP"),
    
    KOSHER("KOSHER"),
    
    JEWISH("JEWISH"),
    
    MUSLIM("MUSLIM"),
    
    CHRISTIAN("CHRISTIAN"),
    
    REMOTE_WORKER("REMOTE_WORKER"),
    
    ATHEIST("ATHEIST"),
    
    QUIET("QUIET");

    private String value;

    AttributeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AttributeEnum fromValue(String value) {
      for (AttributeEnum b : AttributeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AttributeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AttributeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AttributeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AttributeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ATTRIBUTE = "attribute";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE)
  private AttributeEnum attribute;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private BigDecimal weight;

  public static final String SERIALIZED_NAME_SET_WEIGHT = "setWeight";
  @SerializedName(SERIALIZED_NAME_SET_WEIGHT)
  private Boolean setWeight;

  public LookingForRoomiesPreference() {
  }

  public LookingForRoomiesPreference attribute(AttributeEnum attribute) {
    
    this.attribute = attribute;
    return this;
  }

   /**
   * Get attribute
   * @return attribute
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "QUIET", required = true, value = "")

  public AttributeEnum getAttribute() {
    return attribute;
  }


  public void setAttribute(AttributeEnum attribute) {
    this.attribute = attribute;
  }


  public LookingForRoomiesPreference weight(BigDecimal weight) {
    
    this.weight = weight;
    return this;
  }

   /**
   * Get weight
   * @return weight
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.0", required = true, value = "")

  public BigDecimal getWeight() {
    return weight;
  }


  public void setWeight(BigDecimal weight) {
    this.weight = weight;
  }


  public LookingForRoomiesPreference setWeight(Boolean setWeight) {
    
    this.setWeight = setWeight;
    return this;
  }

   /**
   * Get setWeight
   * @return setWeight
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "")

  public Boolean getSetWeight() {
    return setWeight;
  }


  public void setSetWeight(Boolean setWeight) {
    this.setWeight = setWeight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LookingForRoomiesPreference lookingForRoomiesPreference = (LookingForRoomiesPreference) o;
    return Objects.equals(this.attribute, lookingForRoomiesPreference.attribute) &&
        Objects.equals(this.weight, lookingForRoomiesPreference.weight) &&
        Objects.equals(this.setWeight, lookingForRoomiesPreference.setWeight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attribute, weight, setWeight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LookingForRoomiesPreference {\n");
    sb.append("    attribute: ").append(toIndentedString(attribute)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    setWeight: ").append(toIndentedString(setWeight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attribute");
    openapiFields.add("weight");
    openapiFields.add("setWeight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attribute");
    openapiRequiredFields.add("weight");
    openapiRequiredFields.add("setWeight");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LookingForRoomiesPreference
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (LookingForRoomiesPreference.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in LookingForRoomiesPreference is not found in the empty JSON string", LookingForRoomiesPreference.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LookingForRoomiesPreference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LookingForRoomiesPreference` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LookingForRoomiesPreference.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("attribute") != null && !jsonObj.get("attribute").isJsonNull()) && !jsonObj.get("attribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LookingForRoomiesPreference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LookingForRoomiesPreference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LookingForRoomiesPreference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LookingForRoomiesPreference.class));

       return (TypeAdapter<T>) new TypeAdapter<LookingForRoomiesPreference>() {
           @Override
           public void write(JsonWriter out, LookingForRoomiesPreference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LookingForRoomiesPreference read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LookingForRoomiesPreference given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LookingForRoomiesPreference
  * @throws IOException if the JSON string is invalid with respect to LookingForRoomiesPreference
  */
  public static LookingForRoomiesPreference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LookingForRoomiesPreference.class);
  }

 /**
  * Convert an instance of LookingForRoomiesPreference to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

