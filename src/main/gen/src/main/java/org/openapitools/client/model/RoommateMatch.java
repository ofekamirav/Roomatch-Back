/*
 * RooMatch API
 * API documentation for RooMatch backend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RoommateMatch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-13T18:08:01.624619+03:00[Asia/Jerusalem]")
public class RoommateMatch {
  public static final String SERIALIZED_NAME_ROOMMATE_ID = "roommateId";
  @SerializedName(SERIALIZED_NAME_ROOMMATE_ID)
  private String roommateId;

  public static final String SERIALIZED_NAME_ROOMMATE_NAME = "roommateName";
  @SerializedName(SERIALIZED_NAME_ROOMMATE_NAME)
  private String roommateName;

  public static final String SERIALIZED_NAME_MATCH_SCORE = "matchScore";
  @SerializedName(SERIALIZED_NAME_MATCH_SCORE)
  private Integer matchScore;

  public RoommateMatch() {
  }

  public RoommateMatch roommateId(String roommateId) {
    
    this.roommateId = roommateId;
    return this;
  }

   /**
   * Get roommateId
   * @return roommateId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "65fa3d...", required = true, value = "")

  public String getRoommateId() {
    return roommateId;
  }


  public void setRoommateId(String roommateId) {
    this.roommateId = roommateId;
  }


  public RoommateMatch roommateName(String roommateName) {
    
    this.roommateName = roommateName;
    return this;
  }

   /**
   * Get roommateName
   * @return roommateName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Ofek Amirav", required = true, value = "")

  public String getRoommateName() {
    return roommateName;
  }


  public void setRoommateName(String roommateName) {
    this.roommateName = roommateName;
  }


  public RoommateMatch matchScore(Integer matchScore) {
    
    this.matchScore = matchScore;
    return this;
  }

   /**
   * Get matchScore
   * @return matchScore
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "78", required = true, value = "")

  public Integer getMatchScore() {
    return matchScore;
  }


  public void setMatchScore(Integer matchScore) {
    this.matchScore = matchScore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoommateMatch roommateMatch = (RoommateMatch) o;
    return Objects.equals(this.roommateId, roommateMatch.roommateId) &&
        Objects.equals(this.roommateName, roommateMatch.roommateName) &&
        Objects.equals(this.matchScore, roommateMatch.matchScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(roommateId, roommateName, matchScore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoommateMatch {\n");
    sb.append("    roommateId: ").append(toIndentedString(roommateId)).append("\n");
    sb.append("    roommateName: ").append(toIndentedString(roommateName)).append("\n");
    sb.append("    matchScore: ").append(toIndentedString(matchScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("roommateId");
    openapiFields.add("roommateName");
    openapiFields.add("matchScore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("roommateId");
    openapiRequiredFields.add("roommateName");
    openapiRequiredFields.add("matchScore");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RoommateMatch
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (RoommateMatch.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoommateMatch is not found in the empty JSON string", RoommateMatch.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RoommateMatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoommateMatch` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RoommateMatch.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("roommateId") != null && !jsonObj.get("roommateId").isJsonNull()) && !jsonObj.get("roommateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roommateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roommateId").toString()));
      }
      if ((jsonObj.get("roommateName") != null && !jsonObj.get("roommateName").isJsonNull()) && !jsonObj.get("roommateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roommateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roommateName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoommateMatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoommateMatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoommateMatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoommateMatch.class));

       return (TypeAdapter<T>) new TypeAdapter<RoommateMatch>() {
           @Override
           public void write(JsonWriter out, RoommateMatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoommateMatch read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RoommateMatch given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RoommateMatch
  * @throws IOException if the JSON string is invalid with respect to RoommateMatch
  */
  public static RoommateMatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoommateMatch.class);
  }

 /**
  * Convert an instance of RoommateMatch to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

